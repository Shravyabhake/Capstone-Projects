package com.RestapiProject;

import org.testng.annotations.Test;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;
import org.testng.Assert;

public class TelecomP {

    String authToken;
    String contactId;

    @Test(priority = 1)
    public void addNewUser() {
        System.out.println("\nTest For Add New User:");

        Response res = given()
                .contentType("application/json")
                .body("{ \n"
                        + "\"firstName\": \"Test\", \n"
                        + "\"lastName\": \"User\", \n"
                        + "\"email\": \"testing8856598@test.com\", \n"
                        + "\"password\": \"myPassword\" \n"
                        + "}")
                .when().post("https://thinking-tester-contact-list.herokuapp.com/users");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 201);
        System.out.println("Status Code is: " + res.getStatusCode());

        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 201 Created");
        System.out.println("Status Message is:" + res.getStatusLine());
    }

    @Test(priority = 2)
    public void loginUser() {
        System.out.println("\nTest for Login User:");

        Response res = given()
                .contentType("application/json")
                .body("{ \n"
                        + "\"email\":\"testing8856598@test.com\",\n"
                        + "\"password\": \"myPassword\" \n"
                        + "}")
                .when().post("https://thinking-tester-contact-list.herokuapp.com/users/login");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        System.out.println("Status Code is:" + res.getStatusCode());

        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");
        System.out.println("Status Message is: " + res.getStatusLine());

        // Capture token
        String token = res.jsonPath().getString("token");
        Assert.assertNotNull(token, "Token is null");
        authToken = token;
        System.out.println("Generated Token: " + token);
    }

    @Test(priority = 3)
    public void getUserProfile() {
        System.out.println("\nTest for Get User Profile:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .when().get("https://thinking-tester-contact-list.herokuapp.com/users/me");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        String email = res.jsonPath().getString("email");
        Assert.assertNotNull(email, "Email is null");
        System.out.println("User Profile: " + res.asString());
    }

    @Test(priority = 4)
    public void updateUser() {
        System.out.println("\nTest For Update User:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .contentType("application/json")
                .body("{ \n"
                        + "\"firstName\": \"Updated\", \n"
                        + "\"lastName\": \"Username\", \n"
                        + "\"email\": \"testing8856598@test.com\", \n"
                        + "\"password\": \"myPassword\" \n"
                        + "}")
                .when().patch("https://thinking-tester-contact-list.herokuapp.com/users/me");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        String email = res.jsonPath().getString("email");
        Assert.assertEquals(email, "testing8856598@test.com", "Email did not update");
    }

    @Test(priority = 5)
    public void addContact() {
        System.out.println("\nTest For Add Contact:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .contentType("application/json")
                .body("{ \n"
                        + "\"firstName\": \"John\", \n"
                        + "\"lastName\": \"Doe\", \n"
                        + "\"birthdate\": \"1970-01-01\", \n"
                        + "\"email\": \"jdoe@fake.com\", \n"
                        + "\"phone\": \"8005555555\", \n"
                        + "\"street1\": \"1 Main St.\", \n"
                        + "\"street2\": \"Apartment A\", \n"
                        + "\"city\": \"Anytown\", \n"
                        + "\"stateProvince\": \"KS\", \n"
                        + "\"postalCode\": \"12345\", \n"
                        + "\"country\": \"USA\" \n"
                        + "} ")
                .when().post("https://thinking-tester-contact-list.herokuapp.com/contacts");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 201);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 201 Created");

        contactId = res.jsonPath().getString("_id");
        Assert.assertNotNull(contactId, "Contact ID is null");
        System.out.println("Generated Contact ID: " + contactId);
    }

    @Test(priority = 6)
    public void getContactlist() {
        System.out.println("\nTest For Get Contact List:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .when().get("https://thinking-tester-contact-list.herokuapp.com/contacts");

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        Assert.assertTrue(res.jsonPath().getList("$").size() > 0, "Contact list is empty");
    }

    @Test(priority = 7)
    public void getContact() {
        System.out.println("\nTest For Get Contact:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .when().get("https://thinking-tester-contact-list.herokuapp.com/contacts/" + contactId);

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        String id = res.jsonPath().getString("_id");
        Assert.assertEquals(id, contactId, "Contact ID does not match");
    }

    @Test(priority = 8)
    public void updateContact() {
        System.out.println("\nTest For Update Contact:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .contentType("application/json")
                .body("{ \n"
                        + "\"firstName\": \"Amy\", \n"
                        + "\"lastName\": \"Miller\",\n"
                        + "\"birthdate\": \"1992-02-02\", \n"
                        + "\"email\": \"amiller@fake.com\", \n"
                        + "\"phone\": \"8005554242\", \n"
                        + "\"street1\": \"13 School St.\", \n"
                        + "\"street2\": \"Apt. 5\", \n"
                        + "\"city\": \"Washington\", \n"
                        + "\"stateProvince\": \"QC\", \n"
                        + "\"postalCode\": \"A1A1A1\", \n"
                        + "\"country\": \"Canada\" \n"
                        + "}")
                .when().put("https://thinking-tester-contact-list.herokuapp.com/contacts/" + contactId);

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        String email = res.jsonPath().getString("email");
        Assert.assertEquals(email, "amiller@fake.com", "Contact email did not update");
    }

    @Test(priority = 9)
    public void updateContactPartial() {
        System.out.println("\nTest For Update Contact Partially:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .contentType("application/json")
                .body("{ \n"
                        + "\"firstName\": \"Anna\" \n"
                        + "} ")
                .when().patch("https://thinking-tester-contact-list.herokuapp.com/contacts/" + contactId);

        res.then().log().body();

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");

        String firstName = res.jsonPath().getString("firstName");
        Assert.assertEquals(firstName, "Anna", "Partial update failed");
    }

    @Test(priority = 10)
    public void logoutUser() {
        System.out.println("\nTest For Logout User:");

        Response res = given()
                .header("Authorization", "Bearer " + authToken)
                .when().post("https://thinking-tester-contact-list.herokuapp.com/users/logout");

        Assert.assertEquals(res.getStatusCode(), 200);
        Assert.assertEquals(res.getStatusLine(), "HTTP/1.1 200 OK");
    }
}
